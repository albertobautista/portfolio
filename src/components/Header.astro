---
import ThemeToggle from "@/components/ThemeToggle.astro";
const navItems = [
  {
    title: "Projects",
    label: "projects",
    url: "/#projects",
  },
  {
    title: "Skills",
    label: "skills",
    url: "/#skills",
  },
  {
    title: "Certifications",
    label: "certifications",
    url: "/#certifications",
  },

  {
    title: "Contact",
    label: "contact",
    url: "/#contact",
  },
];
---

<header
  class="fixed top-0 z-20 flex items-center justify-center w-full mx-auto"
>
  <nav
    class="flex-wrap w-full gap-2 md:gap-2 flex px-3 h-16 text-sm font-medium text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-orange dark:hover:text-orange/90"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <div class="w-[2px] h-5 bg-[#525356] dark:bg-white inline-flex"></div>
    <ThemeToggle />
  </nav>
</header>

<!-- <script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    console.log("Sections", sections);
    console.log("navItems", navItems);
    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            console.log(
              "item",
              item.getAttribute("aria-label"),
              entry.target.id
            );
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500");
            } else {
              item.classList.remove("text-yellow-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script> -->

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg  backdrop-blur w-full;
    }
  }
</style>
